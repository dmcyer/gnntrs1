(SIG
   (len    List -> Nat)
   (rev    List -> List)
   (app    List List -> List)
   (cons   Nat List -> List)
   (nil    -> List)
   (s      Nat -> Nat)
   (0      -> Nat)
)
(RULES
   len(nil) -> 0
   len(cons(x,xs)) -> s(len(xs))
   rev(nil) -> nil
   rev(cons(x,xs)) -> app(rev(xs),cons(x,nil))
   app(nil,ys) -> ys
   app(cons(x,xs),ys) -> cons(x,app(xs,ys))
   len(rev(xs)) -> len(xs)
)
(COMMENT
experiments for [125]
submitted by: Takahito Aoto
)
