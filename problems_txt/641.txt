(SIG
   (subseteq   List List -> Bool)
   (member     Nat List -> Bool)
   (eq         Nat Nat -> Bool)
   (and        Bool Bool -> Bool)
   (or         Bool Bool -> Bool)
   (cons       Nat List -> List)
   (true       -> Bool)
   (false      -> Bool)
   (nil        -> List)
   (s          Nat -> Nat)
   (0          -> Nat)
)
(RULES
   subseteq(nil,ys) -> true
   subseteq(cons(x,xs),ys) -> and(member(x,ys),subseteq(xs,ys))
   member(x,nil) -> false
   member(x,cons(y,ys)) -> or(eq(x,y),member(x,ys))
   eq(0,0) -> true
   eq(0,s(y)) -> false
   eq(s(x),0) -> false
   eq(s(x),s(y)) -> eq(x,y)
   and(true,true) -> true
   and(x,false) -> false
   and(false,y) -> false
   or(true,y) -> true
   or(x,true) -> true
   or(false,false) -> false
   subseteq(xs,xs) -> true
)
(COMMENT
experiments for [125]
submitted by: Takahito Aoto
)
